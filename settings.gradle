pluginManagement {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        gradlePluginPortal()
        maven {
            url 'https://maven.aliyun.com/repository/spring/'
        }
    }
    plugins {
        id 'org.springframework.boot' version "${springBootPluginVersion}"
        id 'io.spring.dependency-management' version "${springDependencyPluginVersion}"
    }
}

dependencyResolutionManagement {
    repositories {
        mavenLocal()
        maven {
            url 'https://maven.aliyun.com/repository/public/'
        }
        maven {
            url 'https://maven.aliyun.com/repository/spring/'
        }
        mavenCentral()
    }
}

rootProject.name = 'CodeHarbor'



def buildFiles = fileTree(rootDir) {
    def excludes = gradle.startParameter.projectProperties.get("excludeProjects")?.split(",")
    include "**/*.gradle", "**/*.gradle.kts"
    exclude "build", "**/gradle", "settings.gradle", "buildSrc", "/build.gradle", ".*", "out"
    if (excludes) {
        exclude excludes
    }
}

buildFiles.forEach {buildFile->{
    println(buildFile.getName())
}}

buildFiles.forEach { buildFile ->
    def isDefaultName = buildFile.name == "build.gradle" || buildFile.name == "build.gradle.kts"
    def isKotlin = buildFile.name.endsWith ".kts"
    if (isDefaultName) {
        def buildFilePath = buildFile.parentFile.absolutePath
        def projectPath = buildFilePath.replace((String) rootDir.absolutePath, "").replace(File.separator, ":")
        include projectPath
    } else {
        def projectName
        if (isKotlin) {
            projectName = buildFile.name.replace(".gradle.kts", "")
        } else {
            projectName = buildFile.name.replace(".gradle", "")
        }


        def projectPath = ":$projectName"
        include projectPath

        def project = findProject(projectPath)
        project.name = projectName
        project.projectDir = buildFile.parentFile
        project.buildFileName = buildFile.name
    }
}





//include 'harbor-core',
//        'gateway',
//        'user-center'
//include 'code-generator'
//include 'dubbo-api'
//include 'samples'
//include 'samples:dubbo-samples'
//findProject(':samples:dubbo-samples')?.name = 'dubbo-samples'
//include 'samples:rocketmq-samples'
//findProject(':samples:rocketmq-samples')?.name = 'rocketmq-samples'
//include 'samples:seata-samples'
//findProject(':samples:seata-samples')?.name = 'seata-samples'
//include 'samples:dubbo-gateway-samples'
//findProject(':samples:dubbo-gateway-samples')?.name = 'dubbo-gateway-samples'
//include 'mq-api'
////include 'harbor-im'
////include 'harbor-im:im-core'
////findProject(':harbor-im:im-core')?.name = 'im-core'
////include 'harbor-im:im-server'
////findProject(':harbor-im:im-server')?.name = 'im-server'
////include 'harbor-im:im-client'
////findProject(':harbor-im:im-client')?.name = 'im-client'
////include 'harbor-im:im-spring-boot-starter'
////findProject(':harbor-im:im-spring-boot-starter')?.name = 'im-spring-boot-starter'
////include 'harbor-im:im-spring-boot-starter-discovery'
////findProject(':harbor-im:im-spring-boot-starter-discovery')?.name = 'im-spring-boot-starter-discovery'
//include 'xxl-job'
//include 'springframework'
//include 'springframework:spring-web'
//findProject(':springframework:harbor-spring-web')?.name = 'spring-web'
//include 'springframework:spring-boot-autoconfigure'
//findProject(':springframework:spring-boot-autoconfigure')?.name = 'spring-boot-autoconfigure'
//include 'springframework:spring-reboot'
//findProject(':springframework:spring-reboot')?.name = 'spring-reboot'
//include 'springframework:spring-security-crypto'
//findProject(':springframework:spring-security-crypto')?.name = 'spring-security-crypto'
//include 'harbor-crypto'
//include 'springframework:spring-elasticsearch'
//findProject(':springframework:spring-elasticsearch')?.name = 'spring-elasticsearch'
//include 'configure-crypto'
//include 'springframework:elasticsearch-spring-boot-starter'
//findProject(':springframework:elasticsearch-spring-boot-starter')?.name = 'elasticsearch-spring-boot-starter'
//include 'springframework:redis-spring-boot-starter'
//findProject(':springframework:redis-spring-boot-starter')?.name = 'redis-spring-boot-starter'
//include 'springframework:codec-spring-boot-starter'
//findProject(':springframework:codec-spring-boot-starter')?.name = 'codec-spring-boot-starter'
//include 'springframework:spring-security-oauth2'
//findProject(':springframework:spring-security-oauth2')?.name = 'spring-security-oauth2'
//include 'springframework:spring-data-redis'
//findProject(':springframework:spring-data-redis')?.name = 'spring-data-redis'
//include 'springframework:spring-oauth2-core'
//findProject(':springframework:spring-oauth2-core')?.name = 'spring-oauth2-core'

