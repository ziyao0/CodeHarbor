plugins {

    //     id 'java-library'

    id 'org.springframework.boot' version "${springBootPluginVersion}"
    id 'io.spring.dependency-management' version "${springDependencyPluginVersion}"
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: "io.spring.dependency-management"
    apply plugin: "org.springframework.boot"

    group 'com.ziyao.harbor'
    version "${projectVersion}"
    sourceCompatibility = "${sourceCompatibilityVersion}"
    compileJava.options.encoding = "UTF-8"

    configurations.configureEach {
        transitive = true
    }

    jar {
        enabled = true //生成依赖jar包
        archiveClassifier = '' //取消原来plain的后缀
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }
    // 仓库地址
    repositories {
        mavenLocal()
        mavenCentral()
    }
    ext {
        set("mybaitsPlusVersion", "3.5.3.1")
        set("sentinelVersion", "1.8.6")
    }

    dependencies {

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        constraints {
            // Platform declares some versions of libraries used in subprojects
            implementation('commons-httpclient:commons-httpclient:3.1')
            implementation('org.apache.commons:commons-lang3:3.8.1')
            implementation('jakarta.servlet:jakarta.servlet-api:4.0.4')
            implementation('javax.validation:validation-api:2.0.1.Final')
            implementation('org.freemarker:freemarker:2.3.31')
            implementation('com.baomidou:mybatis-plus:3.4.0')
            implementation("com.baomidou:mybatis-plus-generator:${mybaitsPlusVersion}")
            implementation("com.baomidou:mybatis-plus-annotation:${mybaitsPlusVersion}")
            implementation("com.baomidou:mybatis-plus-boot-starter:${mybaitsPlusVersion}")
            implementation("com.baomidou:mybatis-plus-extension:${mybaitsPlusVersion}")
            implementation('mysql:mysql-connector-java:8.0.29')
            implementation('org.projectlombok:lombok:1.18.24')
            implementation('com.alibaba:fastjson:2.0.15')
            implementation('org.slf4j:slf4j-api:1.7.36')
            implementation("com.alibaba.csp:sentinel-apache-dubbo3-adapter:${sentinelVersion}")
            implementation("com.alibaba.csp:sentinel-transport-simple-http:${sentinelVersion}")
        }
    }

    bootRun {

    }

    dependencyManagement {
        imports {
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "org.apache.dubbo:dubbo-bom:${dubboVersion}"
            mavenBom "org.springframework:spring-framework-bom:${springVersion}"
        }
    }
}
// 获取所有模块名称rootProject.subprojects
// 拷贝配置文件
tasks.register('copyFiles', Copy) {

    def inputFile = file("${projectDir}/subprojects.txt") // 使用 projectDir 获取项目根目录
    // 需要拷贝的文件夹
    def subprojects = []
    if (inputFile.exists()) {
        inputFile.eachLine { line ->
            subprojects.add(line.trim())
        }
        // 需要拷贝的源文件
        def source_files = ['resources/config/bootstrap-register.yml']
        // 拷贝文件
        subprojects.each { dir ->
            //处理要拷贝的文件
            source_files.each { source_file ->
                copy {
                    from source_file
                    into dir + '/src/main/resources'
                }
            }
        }
    }
}

//remove source
sourceSets {
    main {
        java {
            srcDirs = []
        }
        resources {
            srcDirs = []
        }
    }
    test {
        java {
            srcDirs = []
        }
        resources {
            srcDirs = []
        }
    }
}
